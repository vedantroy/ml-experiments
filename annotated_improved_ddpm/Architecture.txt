INPUT BLOCKS:
Conv2d(in=3, out=128)
ResBlock(in=128, out=128, emb_channels=512)
ResBlock(in=128, out=128, emb_channels=512)
ResBlock(in=128, out=128, emb_channels=512)
Downsample(in=128)

ResBlock(in=128, out=256, emb_channels=512)
ResBlock(in=256, out=256, emb_channels=512)
ResBlock(in=256, out=256, emb_channels=512)
Downsample(in=256)

ResBlock(in=256, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
ResBlock(in=384, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
ResBlock(in=384, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
Downsample(in=384)

ResBlock(in=384, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=512, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=512, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)


MIDDLE BLOCKS:
ResBlock(in=512, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=512, out=512, emb_channels=512)


OUTPUT BLOCKS:
ResBlock(in=1024, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=1024, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=1024, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
ResBlock(in=896, out=512, emb_channels=512)
AttentionBlock(in=512, heads=4)
Upsample(in=512)

ResBlock(in=896, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
ResBlock(in=768, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
ResBlock(in=768, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
ResBlock(in=640, out=384, emb_channels=512)
AttentionBlock(in=384, heads=4)
Upsample(in=384)

ResBlock(in=640, out=256, emb_channels=512)
ResBlock(in=512, out=256, emb_channels=512)
ResBlock(in=512, out=256, emb_channels=512)
ResBlock(in=384, out=256, emb_channels=512)
Upsample(in=256)

ResBlock(in=384, out=128, emb_channels=512)
ResBlock(in=256, out=128, emb_channels=512)
ResBlock(in=256, out=128, emb_channels=512)
ResBlock(in=256, out=128, emb_channels=512)


OUT:
Conv2d(in=128, out=3)



(2, 3, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 8, 8) -> 8x8
(2, 512, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 16, 16) -> 16x16
(2, 384, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 32, 32) -> 32x32
(2, 256, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 128, 64, 64) -> 64x64
(2, 3, 64, 64) -> 64x64